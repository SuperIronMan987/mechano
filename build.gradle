
// this stuff is just for gradle plugins - mod dependencies are below
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        mavenCentral()
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:${forgegradle_version}"
        classpath "org.parchmentmc:librarian:${librarian_version}"
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}

// apply gradle plugins
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
jarJar.enable()


// 
version = "${minecraft_version}-0.1"
group = 'com.quattage.mechano'
archivesBaseName = 'mechano'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    runs {
        client {
            
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'mechano'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'terminal.jline', 'true' // colors :)

            mods {
                mechano {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'mechano'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'terminal.jline', 'true' // colors :)

            mods {
                mechano {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'mechano'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                mechano {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'terminal.jline', 'true'
            args '--mod', 'mechano', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'create'

            mods {
                mechano {
                    source sourceSets.main
                }
            }
        }
    }
}

// include resources generated by datagen
sourceSets.main.resources { 
    srcDir 'src/generated/resources' 
    exclude '.cache/'
}

mixin {
    add sourceSets.main, "mechano.refmap.json"
    config "mechano.mixins.json"
    debug.export = true
}

eclipse {
    synchronizationTasks processResources
    classpath {
        defaultOutputDir = file('$rootDir/bin/main')
    }
}

// repos to look for mod dependencies in 
repositories {
    maven {
		name = "blamejared"                            // new JEI place, vazkii's
		url = "https://maven.blamejared.com/"
	}
	maven {
		name = "modmaven"                                 // JEI Mirror, Mekanism
		url = "https://modmaven.dev"
	}
    maven {
        name = "tterrag"                           // Registrate/Flywheel/Create
        url  = "https://maven.tterrag.com"
    }
    maven {
        name = "cursemaven"
        url  = "https://www.cursemaven.com"                  // Misc
        content {
            includeGroup "curse.maven"
        }
    }
    maven {                                               // cloth config api
        name = "shedaniel"
        url = "https://maven.shedaniel.me/"
    }

    maven {
        name "jitpack"
        url "https://jitpack.io"
    }
}

// the good shit
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.2"))
    implementation "io.github.llamalad7:mixinextras-forge:0.3.2"

    // All of Create
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }

    // JEI local runtime and API to compile against
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
	compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")

    // cloth config
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")

    // BetterF3
    if(Boolean.parseBoolean(project.use_betterf3)) {
        runtimeOnly fg.deobf("curse.maven:betterf3-401648:${project.betterf3_version}")
    }

    if(Boolean.parseBoolean(project.use_mekanism)) {
        runtimeOnly fg.deobf("mekanism:Mekanism:${minecraft_version}-${mekanism_version}")
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "mechano",
                "Specification-Vendor"    : "quattage",
                "Specification-Version"   : "1", 
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "quattage",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    
}

// this is required in order to patch what I believe is a gradle-vscode bug when running in windows 11
processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    var resourceTargets = [
        'META-INF/mods.toml', 
        'pack.mcmeta',
        'logo.png',
        'mechano.mixins.json'
    ]
    var intoTargets = ["$rootDir/bin/main/"]
    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                }
                into target
            }
        }
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}